test_negative/negative_3.8.py: error: Missing positional argument "channel" in call to "DummyServiceStub"  [call-arg]
test_negative/negative_3.8.py: error: "DummyReply" has no attribute "not_exists"  [attr-defined]
test_negative/negative_3.8.py: error: "DummyReply" has no attribute "__iter__" (not iterable)  [attr-defined]
test_negative/negative_3.8.py: error: "DummyReply" has no attribute "not_exists"  [attr-defined]
test_negative/negative_3.8.py: error: "CallIterator[DummyReply]" has no attribute "value"  [attr-defined]
test_negative/negative_3.8.py: error: Argument 1 to "__call__" of "StreamUnaryMultiCallable" has incompatible type "DummyRequest"; expected "Iterator[DummyRequest]"  [arg-type]
test_negative/negative_3.8.py: error: "DummyReply" has no attribute "__iter__" (not iterable)  [attr-defined]
test_negative/negative_3.8.py: error: Argument 1 to "__call__" of "StreamUnaryMultiCallable" has incompatible type "DummyRequest"; expected "Iterator[DummyRequest]"  [arg-type]
test_negative/negative_3.8.py: error: Argument 1 to "__call__" of "StreamStreamMultiCallable" has incompatible type "DummyRequest"; expected "Iterator[DummyRequest]"  [arg-type]
test_negative/negative_3.8.py: error: "DummyReply" has no attribute "not_exists"  [attr-defined]
test_negative/negative_3.8.py: error: Argument 1 of "UnaryUnary" is incompatible with supertype "DummyServiceServicer"; supertype defines the argument type as "DummyRequest"  [override]
test_negative/negative_3.8.py: note: This violates the Liskov substitution principle
test_negative/negative_3.8.py: note: See https://mypy.readthedocs.io/en/stable/common_issues.html#incompatible-overrides
test_negative/negative_3.8.py: error: Return type "Iterator[DummyReply]" of "UnaryUnary" incompatible with return type "DummyReply" in supertype "DummyServiceServicer"  [override]
test_negative/negative_3.8.py: error: Argument 1 of "UnaryStream" is incompatible with supertype "DummyServiceServicer"; supertype defines the argument type as "DummyRequest"  [override]
test_negative/negative_3.8.py: note: This violates the Liskov substitution principle
test_negative/negative_3.8.py: note: See https://mypy.readthedocs.io/en/stable/common_issues.html#incompatible-overrides
test_negative/negative_3.8.py: error: Return type "DummyReply" of "UnaryStream" incompatible with return type "Iterator[DummyReply]" in supertype "DummyServiceServicer"  [override]
test_negative/negative_3.8.py: error: Argument 1 of "StreamUnary" is incompatible with supertype "DummyServiceServicer"; supertype defines the argument type as "Iterator[DummyRequest]"  [override]
test_negative/negative_3.8.py: note: This violates the Liskov substitution principle
test_negative/negative_3.8.py: note: See https://mypy.readthedocs.io/en/stable/common_issues.html#incompatible-overrides
test_negative/negative_3.8.py: error: Return type "Iterator[DummyReply]" of "StreamUnary" incompatible with return type "DummyReply" in supertype "DummyServiceServicer"  [override]
test_negative/negative.py: error: "Simple1" has no attribute "SerializeToStringg"  [attr-defined]
test_negative/negative.py: error: Argument 1 to "ParseFromString" of "Message" has incompatible type "Simple1"; expected "bytes"  [arg-type]
test_negative/negative.py: error: Argument 1 to "CopyFrom" of "Message" has incompatible type "bytes"; expected "Simple1"  [arg-type]
test_negative/negative.py: error: Argument 1 to "extend" of "list" has incompatible type "RepeatedScalarFieldContainer[str]"; expected "Iterable[int]"  [arg-type]
test_negative/negative.py: error: Argument "foo" to "TestMessage" has incompatible type "int"; expected "str"  [arg-type]
test_negative/negative.py: error: Incompatible types in assignment (expression has type "int", variable has type "ValueType")  [assignment]
test_negative/negative.py: error: Argument 1 to "HasField" of "Simple1" has incompatible type "Literal['garbage']"; expected "Literal['a_boolean', b'a_boolean', 'a_enum', b'a_enum', 'a_external_enum', b'a_external_enum', 'a_inner', b'a_inner', 'a_nested', b'a_nested', 'a_oneof', b'a_oneof', 'a_oneof_1', b'a_oneof_1', 'a_oneof_2', b'a_oneof_2', 'a_string', b'a_string', 'a_uint32', b'a_uint32', 'email', b'email', 'inner_enum', b'inner_enum', 'inner_enum_in_oneof', b'inner_enum_in_oneof', 'inner_message', b'inner_message', 'nested_enum', b'nested_enum', 'nested_message', b'nested_message', 'no_package', b'no_package', 'outer_enum_in_oneof', b'outer_enum_in_oneof', 'outer_message_in_oneof', b'outer_message_in_oneof', 'user_id', b'user_id']"  [arg-type]
test_negative/negative.py: error: Argument 1 to "HasField" of "Simple1" has incompatible type "Literal['a_repeated_string']"; expected "Literal['a_boolean', b'a_boolean', 'a_enum', b'a_enum', 'a_external_enum', b'a_external_enum', 'a_inner', b'a_inner', 'a_nested', b'a_nested', 'a_oneof', b'a_oneof', 'a_oneof_1', b'a_oneof_1', 'a_oneof_2', b'a_oneof_2', 'a_string', b'a_string', 'a_uint32', b'a_uint32', 'email', b'email', 'inner_enum', b'inner_enum', 'inner_enum_in_oneof', b'inner_enum_in_oneof', 'inner_message', b'inner_message', 'nested_enum', b'nested_enum', 'nested_message', b'nested_message', 'no_package', b'no_package', 'outer_enum_in_oneof', b'outer_enum_in_oneof', 'outer_message_in_oneof', b'outer_message_in_oneof', 'user_id', b'user_id']"  [arg-type]
test_negative/negative.py: error: Argument 1 to "HasField" of "SimpleProto3" has incompatible type "Literal['garbage']"; expected "Literal['OuterMessage3', b'OuterMessage3', '_an_optional_string', b'_an_optional_string', 'a_oneof', b'a_oneof', 'a_oneof_1', b'a_oneof_1', 'a_oneof_2', b'a_oneof_2', 'an_optional_string', b'an_optional_string', 'b_oneof', b'b_oneof', 'b_oneof_1', b'b_oneof_1', 'b_oneof_2', b'b_oneof_2', 'bool', b'bool', 'inner_enum_in_oneof', b'inner_enum_in_oneof', 'outer_enum_in_oneof', b'outer_enum_in_oneof', 'outer_message', b'outer_message', 'outer_message_in_oneof', b'outer_message_in_oneof']"  [arg-type]
test_negative/negative.py: error: Argument 1 to "HasField" of "SimpleProto3" has incompatible type "Literal['a_string']"; expected "Literal['OuterMessage3', b'OuterMessage3', '_an_optional_string', b'_an_optional_string', 'a_oneof', b'a_oneof', 'a_oneof_1', b'a_oneof_1', 'a_oneof_2', b'a_oneof_2', 'an_optional_string', b'an_optional_string', 'b_oneof', b'b_oneof', 'b_oneof_1', b'b_oneof_1', 'b_oneof_2', b'b_oneof_2', 'bool', b'bool', 'inner_enum_in_oneof', b'inner_enum_in_oneof', 'outer_enum_in_oneof', b'outer_enum_in_oneof', 'outer_message', b'outer_message', 'outer_message_in_oneof', b'outer_message_in_oneof']"  [arg-type]
test_negative/negative.py: error: Argument 1 to "HasField" of "SimpleProto3" has incompatible type "Literal['outer_enum']"; expected "Literal['OuterMessage3', b'OuterMessage3', '_an_optional_string', b'_an_optional_string', 'a_oneof', b'a_oneof', 'a_oneof_1', b'a_oneof_1', 'a_oneof_2', b'a_oneof_2', 'an_optional_string', b'an_optional_string', 'b_oneof', b'b_oneof', 'b_oneof_1', b'b_oneof_1', 'b_oneof_2', b'b_oneof_2', 'bool', b'bool', 'inner_enum_in_oneof', b'inner_enum_in_oneof', 'outer_enum_in_oneof', b'outer_enum_in_oneof', 'outer_message', b'outer_message', 'outer_message_in_oneof', b'outer_message_in_oneof']"  [arg-type]
test_negative/negative.py: error: Argument 1 to "HasField" of "SimpleProto3" has incompatible type "Literal['a_repeated_string']"; expected "Literal['OuterMessage3', b'OuterMessage3', '_an_optional_string', b'_an_optional_string', 'a_oneof', b'a_oneof', 'a_oneof_1', b'a_oneof_1', 'a_oneof_2', b'a_oneof_2', 'an_optional_string', b'an_optional_string', 'b_oneof', b'b_oneof', 'b_oneof_1', b'b_oneof_1', 'b_oneof_2', b'b_oneof_2', 'bool', b'bool', 'inner_enum_in_oneof', b'inner_enum_in_oneof', 'outer_enum_in_oneof', b'outer_enum_in_oneof', 'outer_message', b'outer_message', 'outer_message_in_oneof', b'outer_message_in_oneof']"  [arg-type]
test_negative/negative.py: error: Argument 1 to "ClearField" of "Simple1" has incompatible type "Literal['garbage']"; expected "Literal['a_boolean', b'a_boolean', 'a_enum', b'a_enum', 'a_external_enum', b'a_external_enum', 'a_inner', b'a_inner', 'a_nested', b'a_nested', 'a_oneof', b'a_oneof', 'a_oneof_1', b'a_oneof_1', 'a_oneof_2', b'a_oneof_2', 'a_repeated_string', b'a_repeated_string', 'a_string', b'a_string', 'a_uint32', b'a_uint32', 'email', b'email', 'email_by_uid', b'email_by_uid', 'inner_enum', b'inner_enum', 'inner_enum_in_oneof', b'inner_enum_in_oneof', 'inner_message', b'inner_message', 'nested_enum', b'nested_enum', 'nested_message', b'nested_message', 'no_package', b'no_package', 'outer_enum_in_oneof', b'outer_enum_in_oneof', 'outer_message_in_oneof', b'outer_message_in_oneof', 'rep_inner_enum', b'rep_inner_enum', 'rep_inner_message', b'rep_inner_message', 'user_id', b'user_id']"  [arg-type]
test_negative/negative.py: error: Argument 1 to "ClearField" of "SimpleProto3" has incompatible type "Literal['garbage']"; expected "Literal['OuterEnum', b'OuterEnum', 'OuterMessage3', b'OuterMessage3', '_an_optional_string', b'_an_optional_string', 'a_oneof', b'a_oneof', 'a_oneof_1', b'a_oneof_1', 'a_oneof_2', b'a_oneof_2', 'a_outer_enum', b'a_outer_enum', 'a_repeated_string', b'a_repeated_string', 'a_string', b'a_string', 'an_optional_string', b'an_optional_string', 'b_oneof', b'b_oneof', 'b_oneof_1', b'b_oneof_1', 'b_oneof_2', b'b_oneof_2', 'bool', b'bool', 'email', b'email', 'email_by_uid', b'email_by_uid', 'inner_enum', b'inner_enum', 'inner_enum_in_oneof', b'inner_enum_in_oneof', 'map_message', b'map_message', 'map_scalar', b'map_scalar', 'outer_enum_in_oneof', b'outer_enum_in_oneof', 'outer_message', b'outer_message', 'outer_message_in_oneof', b'outer_message_in_oneof', 'user_id', b'user_id']"  [arg-type]
test_negative/negative.py: error: Argument 1 to "WhichOneof" of "Simple1" has incompatible type "Literal['garbage']"; expected "Literal['a_oneof', b'a_oneof']"  [arg-type]
test_negative/negative.py: error: Incompatible types in assignment (expression has type "Optional[Literal['a_oneof_1', 'a_oneof_2', 'outer_message_in_oneof', 'outer_enum_in_oneof', 'inner_enum_in_oneof']]", variable has type "int")  [assignment]
test_negative/negative.py: error: Argument 1 to "HasField" of "Simple2" has incompatible type "Literal['a_oneof_1', 'a_oneof_2', 'outer_message_in_oneof', 'outer_enum_in_oneof', 'inner_enum_in_oneof']"; expected "Literal['a_string', b'a_string']"  [arg-type]
test_negative/negative.py: error: Incompatible types in assignment (expression has type "Optional[Literal['a_oneof_1', 'a_oneof_2', 'outer_message_in_oneof', 'outer_enum_in_oneof', 'inner_enum_in_oneof']]", variable has type "str")  [assignment]
test_negative/negative.py: error: No overload variant of "WhichOneof" of "SimpleProto3" matches argument type "str"  [call-overload]
test_negative/negative.py: note: Possible overload variants:
test_negative/negative.py: note:     def WhichOneof(self, oneof_group: Literal['_an_optional_string', b'_an_optional_string']) -> Optional[Literal['an_optional_string']]
test_negative/negative.py: note:     def WhichOneof(self, oneof_group: Literal['a_oneof', b'a_oneof']) -> Optional[Literal['a_oneof_1', 'a_oneof_2', 'outer_message_in_oneof', 'outer_enum_in_oneof', 'inner_enum_in_oneof']]
test_negative/negative.py: note:     def WhichOneof(self, oneof_group: Literal['b_oneof', b'b_oneof']) -> Optional[Literal['b_oneof_1', 'b_oneof_2']]
test_negative/negative.py: error: Incompatible types in assignment (expression has type "Optional[Literal['a_oneof_1', 'a_oneof_2', 'outer_message_in_oneof', 'outer_enum_in_oneof', 'inner_enum_in_oneof']]", variable has type "int")  [assignment]
test_negative/negative.py: error: Argument 1 to "HasField" of "Simple2" has incompatible type "Literal['a_oneof_1', 'a_oneof_2', 'outer_message_in_oneof', 'outer_enum_in_oneof', 'inner_enum_in_oneof']"; expected "Literal['a_string', b'a_string']"  [arg-type]
test_negative/negative.py: error: Incompatible types in assignment (expression has type "_ExtensionFieldDescriptor[Simple1, Extensions1]", variable has type "int")  [assignment]
test_negative/negative.py: error: "Type[Extensions1]" has no attribute "bad"  [attr-defined]
test_negative/negative.py: error: "Extensions1" has no attribute "foo"  [attr-defined]
test_negative/negative.py: error: Incompatible types in assignment (expression has type "Extensions2", variable has type "Extensions1")  [assignment]
test_negative/negative.py: error: Invalid index type "str" for "_ExtensionDict[Simple1]"; expected type "_ExtensionFieldDescriptor[Simple1, <nothing>]"  [index]
test_negative/negative.py: error: Invalid index type "_ExtensionFieldDescriptor[Simple2, SeparateFileExtension]" for "_ExtensionDict[Simple1]"; expected type "_ExtensionFieldDescriptor[Simple1, SeparateFileExtension]"  [index]
test_negative/negative.py: error: Unsupported operand types for in ("_ExtensionFieldDescriptor[Simple2, SeparateFileExtension]" and "_ExtensionDict[Simple1]")  [operator]
test_negative/negative.py: error: Argument 1 to "__delitem__" of "_ExtensionDict" has incompatible type "_ExtensionFieldDescriptor[Simple2, SeparateFileExtension]"; expected "_ExtensionFieldDescriptor[Simple1, SeparateFileExtension]"  [arg-type]
test_negative/negative.py: error: Argument 1 to "HasExtension" of "Message" has incompatible type "_ExtensionFieldDescriptor[Simple2, SeparateFileExtension]"; expected "_ExtensionFieldDescriptor[Simple1, Any]"  [arg-type]
test_negative/negative.py: error: Argument 1 to "ClearExtension" of "Message" has incompatible type "_ExtensionFieldDescriptor[Simple1, Extensions1]"; expected "_ExtensionFieldDescriptor[Simple2, Any]"  [arg-type]
test_negative/negative.py: error: Incompatible types in assignment (expression has type "int", variable has type "_ExtensionFieldDescriptor[Simple1, Any]")  [assignment]
test_negative/negative.py: error: Incompatible types in assignment (expression has type "Optional[Literal['b_oneof_1', 'b_oneof_2']]", variable has type "Optional[Literal['a_oneof_1', 'a_oneof_2', 'outer_message_in_oneof', 'outer_enum_in_oneof', 'inner_enum_in_oneof']]")  [assignment]
test_negative/negative.py: error: "Descriptor" has no attribute "Garbage"  [attr-defined]
test_negative/negative.py: error: "Descriptor" has no attribute "Garbage"  [attr-defined]
test_negative/negative.py: error: "EnumDescriptor" has no attribute "Garbage"  [attr-defined]
test_negative/negative.py: error: "FileDescriptor" has no attribute "Garbage"  [attr-defined]
test_negative/negative.py: error: "ValueType" has no attribute "FOO"  [attr-defined]
test_negative/negative.py: error: Argument 1 to "Name" of "_EnumTypeWrapper" has incompatible type "int"; expected "ValueType"  [arg-type]
test_negative/negative.py: error: Argument 1 to "Name" of "_EnumTypeWrapper" has incompatible type "testproto.test3_pb2.SimpleProto3._InnerEnum.ValueType"; expected "testproto.test3_pb2._OuterEnum.ValueType"  [arg-type]
test_negative/negative.py: error: Argument 1 to "Name" of "_EnumTypeWrapper" has incompatible type "testproto.test3_pb2.SimpleProto3._InnerEnum.ValueType"; expected "testproto.test3_pb2._OuterEnum.ValueType"  [arg-type]
test_negative/negative.py: error: Argument 1 to "Name" of "_EnumTypeWrapper" has incompatible type "testproto.test3_pb2.SimpleProto3._InnerEnum.ValueType"; expected "testproto.test3_pb2._OuterEnum.ValueType"  [arg-type]
test_negative/negative.py: error: "ScalarMap[int, str]" has no attribute "get_or_create"  [attr-defined]
test_negative/negative.py: error: No overload variant of "get" of "ScalarMap" matches argument type "str"  [call-overload]
test_negative/negative.py: note: Possible overload variants:
test_negative/negative.py: note:     def get(self, key: int, default: None = ...) -> str
test_negative/negative.py: note:     def [_T] get(self, key: int, default: Union[str, _T]) -> Union[str, _T]
test_negative/negative.py: error: No overload variant of "get" of "MessageMap" matches argument type "str"  [call-overload]
test_negative/negative.py: note: Possible overload variants:
test_negative/negative.py: note:     def get(self, key: int, default: None = ...) -> OuterMessage3
test_negative/negative.py: note:     def [_T] get(self, key: int, default: Union[OuterMessage3, _T]) -> Union[OuterMessage3, _T]
test_negative/negative.py: error: Incompatible types in assignment (expression has type "str", variable has type "int")  [assignment]
test_negative/negative.py: error: Incompatible types in assignment (expression has type "OuterMessage3", variable has type "int")  [assignment]
test_negative/negative.py: error: Dict entry 0 has incompatible type "str": "int"; expected "int": "str"  [dict-item]
test_negative/negative.py: error: Dict entry 0 has incompatible type "str": "str"; expected "int": "OuterMessage3"  [dict-item]
test_negative/negative.py: error: Incompatible types in assignment (expression has type "int", variable has type "UserId")  [assignment]
test_negative/negative.py: error: Incompatible types in assignment (expression has type "str", variable has type "Email")  [assignment]
test_negative/negative.py: error: Invalid index type "int" for "ScalarMap[UserId, Email]"; expected type "UserId"  [index]
test_negative/negative.py: error: Incompatible types in assignment (expression has type "str", target has type "Email")  [assignment]
test_negative/negative.py: error: Incompatible types in assignment (expression has type "str", target has type "Email")  [assignment]
test_negative/negative.py: error: Invalid index type "int" for "ScalarMap[UserId, Email]"; expected type "UserId"  [index]
test_negative/negative.py: error: Argument "user_id" to "Simple1" has incompatible type "int"; expected "Optional[UserId]"  [arg-type]
test_negative/negative.py: error: Argument "email" to "Simple1" has incompatible type "str"; expected "Optional[Email]"  [arg-type]
test_negative/negative.py: error: Dict entry 0 has incompatible type "int": "str"; expected "UserId": "Email"  [dict-item]
test_negative/negative.py: error: Module "testproto.reexport_pb2" has no attribute "Inner"  [attr-defined]
test_negative/negative.py: error: Argument "a_string" to "OuterMessage3" has incompatible type "None"; expected "str"  [arg-type]
test_negative/negative.py: error: Property "a_repeated_string" defined in "Simple1" is read-only  [misc]
test_negative/negative.py: error: Property "rep_inner_enum" defined in "Simple1" is read-only  [misc]
test_negative/negative.py: error: "_r_None" has no attribute "invalid"; maybe "valid"?  [attr-defined]
test_negative/negative.py: error: Incompatible types in assignment (expression has type "ValueType", variable has type "str")  [assignment]
Found 80 errors in 2 files (checked 32 source files)
