# Generated pb2 __init__ methods diverge because the runtime
# has *args, **kwargs - and we're trying to do better
testproto\..*_pb2\..*\.__init__$

# stubtest is confused by these edge cases
testproto.test_pb2.PythonReservedKeywords.*
testproto.test_pb2.None

# Enum variants - stubtest doesn't like int varying from a NewType
testproto.test_pb2.FOO
testproto.test_pb2.BAR
testproto.test_pb2.Simple1.INNER1
testproto.test_pb2.Simple1.INNER2
testproto.test_pb2.Name
testproto.test_pb2.Value
testproto.test_pb2.items
testproto.test_pb2.keys
testproto.test_pb2.values
testproto.test3_pb2.SimpleProto3.INNER1
testproto.test3_pb2.SimpleProto3.INNER2
testproto.reexport_pb2.SimpleProto3.INNER1
testproto.reexport_pb2.SimpleProto3.INNER2
testproto.reexport_pb2.UNKNOWN
testproto.reexport_pb2.FOO3
testproto.reexport_pb2.BAR3
testproto.test3_pb2.UNKNOWN
testproto.test3_pb2.FOO3
testproto.test3_pb2.BAR3
testproto.nested.nested_pb2.AnotherNested.ONE
testproto.nested.nested_pb2.AnotherNested.TWO
testproto.readme_enum_pb2.HELLO
testproto.readme_enum_pb2.WORLD
testproto.nested.nested_pb2.AnotherNested.NestedMessage.UNDEFINED
testproto.nested.nested_pb2.AnotherNested.NestedMessage.NESTED_ENUM1
testproto.nested.nested_pb2.AnotherNested.NestedMessage.NESTED_ENUM2
testproto.nested.nested_pb2.AnotherNested.INVALID

# Our enum types and helper types aren't there at runtime (Dynamic EnumTypeWrapper at runtime)
# .*\..*EnumTypeWrapper$
testproto.test_pb2.Simple1._?InnerEnum(EnumTypeWrapper)?
testproto.test_pb2._?OuterEnum(EnumTypeWrapper)?
testproto.test_pb2._?NamingConflicts(EnumTypeWrapper)?
testproto.test3_pb2.SimpleProto3._?InnerEnum(EnumTypeWrapper)?
testproto.test3_pb2._?OuterEnum(EnumTypeWrapper)?
testproto.reexport_pb2.SimpleProto3._?InnerEnum(EnumTypeWrapper)?
testproto.reexport_pb2._?OuterEnum(EnumTypeWrapper)?
testproto.readme_enum_pb2._?MyEnum(EnumTypeWrapper)?
testproto.nested.nested_pb2.AnotherNested._?NestedEnum(EnumTypeWrapper)?
testproto.nested.nested_pb2.AnotherNested.NestedMessage._?NestedEnum2(EnumTypeWrapper)?

# Part of an "EXPERIMENTAL API" according to comment. Not documented.
testproto.grpc.dummy_pb2_grpc.DummyService
testproto.grpc.import_pb2_grpc.SimpleService

# global prefix globals are generated, but aren't used at runtime
.*_pb2\.global___.*

# All readonly generated @property fields seem to trip up
# stubtest. It claims they aren't available at runtime, when practically,
# they actually are.
# Eg:
# error: testproto.test_pb2.Simple1.rep_inner_message is not present at runtime
#
testproto.Capitalized.Capitalized_pb2.Upper.Lower
testproto.Capitalized.Capitalized_pb2.lower2.upper
testproto.nopackage_pb2.NoPackage2.np
testproto.nopackage_pb2.NoPackage2.np_rep
testproto.reexport_pb2.SimpleProto3.MapMessageEntry.value
testproto.reexport_pb2.SimpleProto3.OuterMessage3
testproto.reexport_pb2.SimpleProto3.a_repeated_string
testproto.reexport_pb2.SimpleProto3.bool
testproto.reexport_pb2.SimpleProto3.email_by_uid
testproto.reexport_pb2.SimpleProto3.map_message
testproto.reexport_pb2.SimpleProto3.map_scalar
testproto.reexport_pb2.SimpleProto3.outer_message
testproto.reexport_pb2.SimpleProto3.outer_message_in_oneof
testproto.test3_pb2.SimpleProto3.MapMessageEntry.value
testproto.test3_pb2.SimpleProto3.OuterMessage3
testproto.test3_pb2.SimpleProto3.a_repeated_string
testproto.test3_pb2.SimpleProto3.bool
testproto.test3_pb2.SimpleProto3.email_by_uid
testproto.test3_pb2.SimpleProto3.map_message
testproto.test3_pb2.SimpleProto3.map_scalar
testproto.test3_pb2.SimpleProto3.outer_message
testproto.test3_pb2.SimpleProto3.outer_message_in_oneof
testproto.test_pb2.Simple1.a_inner
testproto.test_pb2.Simple1.a_nested
testproto.test_pb2.Simple1.a_repeated_string
testproto.test_pb2.Simple1.email_by_uid
testproto.test_pb2.Simple1.inner_message
testproto.test_pb2.Simple1.nested_message
testproto.test_pb2.Simple1.no_package
testproto.test_pb2.Simple1.outer_message_in_oneof
testproto.test_pb2.Simple1.rep_inner_enum
testproto.test_pb2.Simple1.rep_inner_message
